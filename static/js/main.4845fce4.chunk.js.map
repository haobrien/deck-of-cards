{"version":3,"sources":["Card.js","Deck.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","angle","Math","random","xPos","yPos","_transform","style","transform","this","src","url","alt","Component","API_URL","Deck","state","deckId","cards","isDone","drawCard","bind","newDeck","axios","get","then","res","console","log","setState","data","deck_id","catch","e","newCard","image","cur","remaining","map","c","btn","onClick","className","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSAoBeA,E,kDAjBX,WAAYC,GAAQ,IAAD,sBACf,cAAMA,GACN,IAAIC,EAAwB,GAAhBC,KAAKC,SAAgB,GAC7BC,EAAuB,GAAhBF,KAAKC,SAAgB,GAC5BE,EAAuB,GAAhBH,KAAKC,SAAgB,GAJjB,OAKf,EAAKG,WAAL,oBAA+BF,EAA/B,eAA0CC,EAA1C,sBAA4DJ,EAA5D,QALe,E,0CAOnB,WACI,OACI,qBACIM,MAAO,CAAEC,UAAWC,KAAKH,YACzBI,IAAKD,KAAKT,MAAMW,IAChBC,IAAI,a,GAbDC,a,gBCEbC,G,MAAU,4CAgEDC,E,kDA7DX,WAAYf,GAAQ,IAAD,8BACf,cAAMA,IACDgB,MAAQ,CAAEC,OAAQ,GAAIC,MAAO,GAAIC,QAAQ,GAC9C,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBAJA,E,qDAOnB,WACIZ,KAAKa,Y,qBAGT,WAAW,IAAD,OACNC,IAAMC,IAAIV,EAAU,6BAA6BW,MAAK,SAAAC,GAClDC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAAEZ,OAAQS,EAAII,KAAKC,QAASb,MAAO,GAAIC,QAAQ,OAC9Da,OAAM,SAAAC,GACLN,QAAQC,IAAI,QAASK,Q,sBAI7B,WAAY,IAAD,OACPV,IAAMC,IAAIV,EAAO,UAAML,KAAKO,MAAMC,OAAjB,mBACZQ,MAAK,SAAAC,GAEF,IAAMQ,EAAUR,EAAII,KAAKZ,MAAM,GAAGiB,MAClC,EAAKN,UAAS,SAAAO,GACV,IAAIjB,EAAiC,IAAvBO,EAAII,KAAKO,UACvB,MAAO,CAAEnB,MAAM,GAAD,mBAAMkB,EAAIlB,OAAV,CAAiBgB,IAAUf,OAAQA,SAEtDa,OAAM,SAAAC,GACLN,QAAQC,IAAI,QAASK,Q,oBAIjC,WACI,IAAMf,EAAQT,KAAKO,MAAME,MAAMoB,KAAI,SAAAC,GAC/B,OAAO,cAAC,EAAD,CAAM5B,IAAK4B,OAEhBC,EAAM/B,KAAKO,MAAMG,OACjB,gCACE,+CACA,wBAAQsB,QAAShC,KAAKa,QAAtB,0BAEF,wBAAQmB,QAAShC,KAAKW,SAAtB,0BAEN,OACI,sBAAKsB,UAAU,OAAf,UACI,mCACI,+CACA,iEACCF,KAEL,qBAAKE,UAAU,aAAf,SACKxB,W,GAtDFL,aCKJ8B,MARf,WACE,OACE,qBAAKD,UAAU,MAAf,SACE,cAAC,EAAD,OCMSE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4845fce4.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Card extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        let angle = Math.random() * 20 - 10\r\n        let xPos = Math.random() * 30 - 15\r\n        let yPos = Math.random() * 30 - 15\r\n        this._transform = `translate(${xPos}px, ${yPos}px) rotate(${angle}deg)`\r\n    }\r\n    render() {\r\n        return (\r\n            <img \r\n                style={{ transform: this._transform }}\r\n                src={this.props.url} \r\n                alt=\"card\" />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card","import React, { Component } from 'react'\r\nimport Card from './Card'\r\nimport axios from 'axios'\r\nimport './Deck.css'\r\nconst API_URL = 'https://www.deckofcardsapi.com/api/deck/'\r\n\r\nclass Deck extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { deckId: '', cards: [], isDone: false }\r\n        this.drawCard = this.drawCard.bind(this)\r\n        this.newDeck = this.newDeck.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.newDeck()\r\n    }\r\n\r\n    newDeck() {\r\n        axios.get(API_URL + 'new/shuffle/?deck_count=1').then(res => {\r\n            console.log(res)\r\n            this.setState({ deckId: res.data.deck_id, cards: [], isDone: false })\r\n        }).catch(e => {\r\n            console.log('Error', e)\r\n        })\r\n    }\r\n\r\n    drawCard() {\r\n        axios.get(API_URL + `${this.state.deckId}/draw/?count=1`)\r\n            .then(res => {\r\n                // console.log(res.data.cards[0].code)\r\n                const newCard = res.data.cards[0].image\r\n                this.setState(cur => {\r\n                    let isDone = (res.data.remaining === 0)\r\n                    return { cards: [...cur.cards, newCard], isDone: isDone }\r\n                })\r\n            }).catch(e => {\r\n                console.log('Error', e)\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const cards = this.state.cards.map(c => {\r\n            return <Card url={c} />\r\n        })\r\n        const btn = this.state.isDone\r\n            ? <div>\r\n                <h2>Out of cards!</h2>\r\n                <button onClick={this.newDeck}>New Deck?</button>\r\n            </div>\r\n            : <button onClick={this.drawCard}>Draw a Card </button>\r\n\r\n        return (\r\n            <div className=\"Deck\">\r\n                <header>\r\n                    <h1>Deck of Cards</h1>\r\n                    <h2>A small demo made with React.js</h2>\r\n                    {btn}\r\n                </header>\r\n                <div className=\"Deck-cards\">\r\n                    {cards}\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default Deck","import './App.css';\nimport Deck from './Deck';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Deck/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}